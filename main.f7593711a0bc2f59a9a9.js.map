{"version":3,"file":"main.f7593711a0bc2f59a9a9.js","mappings":"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","sources":["webpack://battleship/webpack/bootstrap","webpack://battleship/webpack/runtime/define property getters","webpack://battleship/webpack/runtime/hasOwnProperty shorthand","webpack://battleship/./src/dom.js","webpack://battleship/./src/index.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","import { Ship, Gameboard, Player } from './index.js';\n\nclass EventListeners {\n  constructor() {\n    this.computerBoard = document.querySelector('#computer-board');\n    this.playerBoard = document.querySelector('#player-board');\n    this.playButton = document.querySelector('#play-button');\n    this.restartButton = document.querySelector('#restart-button');\n    this.swapBoardButton = document.querySelector('#swap-button');\n    this.displayMessage = document.querySelector('.display-message')\n\n    this.swapBoardButton.addEventListener('click', () => {\n      this.setupGame()\n    })\n      \n\n    this.playButton.addEventListener('click', () => {\n      if (this.displayMessage.classList.contains('winner')) {\n        this.displayMessage.classList.remove('winner')\n      }\n      if (this.displayMessage.classList.contains('loser')) {\n        this.displayMessage.classList.remove('loser')\n      }\n      this.displayMessage.textContent = 'Select a coordinate on the enemy grid to fire'\n      this.playButton.classList.add('hide');\n      this.restartButton.classList.remove('hide');\n      this.swapBoardButton.classList.remove('hide');\n      this.computerBoard.classList.remove('hide');\n      this.playerBoard.classList.remove('hide');\n      this.setupGame();\n    });\n\n    this.restartButton.addEventListener('click', () => {\n      this.swapBoardButton.classList.remove('hide')\n      this.player.gameboard.reset()\n      this.computer.gameboard.reset()\n      renderBoard(this.player.gameboard, this.playerBoard);\n      renderBoard(this.computer.gameboard, this.computerBoard);\n    });\n\n    this.computerBoard.addEventListener('click', (event) => {\n      if (!event.target.classList.contains('cell')) {\n        return;\n      }\n      const x = parseInt(event.target.dataset.x);\n      const y = parseInt(event.target.dataset.y);\n      this.runGame(x, y);\n    });\n  }\n\n\n  setupGame() {\n    this.player = new Player('Human');\n    this.computer = new Player('Computer');\n\n    const shipLengths = [5, 4, 3, 2, 1];\n\n    this.setShipsRandomly(this.player, shipLengths);\n    this.setShipsRandomly(this.computer, shipLengths);\n\n    renderBoard(this.player.gameboard, this.playerBoard);\n    renderBoard(this.computer.gameboard, this.computerBoard);\n  }\n\n  setShipsRandomly(player, shipLengths) {\n    shipLengths.forEach((length) => {\n      let placed = false;\n      while (!placed) {\n        const x = Math.floor(Math.random() * 10);\n        const y = Math.floor(Math.random() * 10);\n        const isHorizontal = Math.random() < 0.5;\n        const newShip = new Ship(length);\n        placed = player.gameboard.placeShip(newShip, x, y, isHorizontal);\n      }\n    });\n  }\n\n  runGame(x, y) {\n    if (isNaN(x) || isNaN(y)) {\n      return;\n    }\n    this.swapBoardButton.classList.add('hide')\n\n    this.player.attack(this.computer.gameboard, x, y);\n    renderBoard(this.computer.gameboard, this.computerBoard);\n\n    if (this.computer.gameboard.allShipsSunk()) {\n      this.displayMessage.textContent = 'You Win!'\n      this.displayMessage.classList.add('winner')\n      this.computerBoard.classList.add('hide');\n      this.playerBoard.classList.add('hide');\n      this.restartButton.classList.add('hide');\n      this.playButton.classList.remove('hide');\n      this.playButton.innerHTML = 'Play Again';\n      return;\n    }\n\n    // computer turn\n\n    setTimeout(() => {\n      this.computer.takeTurnComputer(this.player.gameboard);\n      renderBoard(this.player.gameboard, this.playerBoard);\n      if (this.player.gameboard.allShipsSunk()) {\n        this.displayMessage.textContent = 'You Lose!';\n        this.displayMessage.classList.add('loser');\n        this.computerBoard.classList.add('hide');\n        this.playerBoard.classList.add('hide');\n        this.restartButton.classList.add('hide');\n        this.playButton.classList.remove('hide');\n        this.playButton.innerHTML = 'Play Again';\n        return;\n      }\n    }, 500);\n  }\n}\n\nfunction renderBoard(gameboard, boardElement) {\n  boardElement.innerHTML = '';\n\n  for (let y = 0; y < gameboard.board.length; y++) {\n    for (let x = 0; x < gameboard.board[y].length; x++) {\n      const cell = document.createElement('div');\n      cell.classList.add('cell');\n      cell.dataset.x = x;\n      cell.dataset.y = y;\n\n      const cellState = gameboard.board[y][x];\n\n      if (cellState === 'miss') {\n        cell.classList.add('miss');\n      } else if (cellState === 'hit') {\n        cell.classList.add('hit');\n      } else if (typeof cellState === 'object' && cellState !== null) {\n        cell.classList.add('ship');\n      }\n\n      boardElement.appendChild(cell);\n    }\n  }\n}\n\nexport { renderBoard, EventListeners };\n","import { renderBoard, EventListeners } from './dom.js';\nimport './style.css';\n\nclass Ship {\n  constructor(length) {\n    this.length = length;\n    this.numHit = 0;\n  }\n\n  hit() {\n    this.numHit++;\n  }\n\n  isSunk() {\n    return this.numHit >= this.length;\n  }\n}\n\nclass Gameboard {\n  constructor() {\n    this.board = this.createBoard();\n    this.ships = [];\n    this.originalShipPlacement = [];\n  }\n\n  createBoard() {\n    const board = []; // 10 x 10 gameboard\n    const rowSize = 10;\n\n    for (let i = 0; i < rowSize; i++) {\n      board.push(new Array(rowSize).fill(null));\n    }\n    return board;\n  }\n\n  placeShip(ship, x, y, isHorizontal = true) {\n    if (isHorizontal && ship.length + x > 10) {\n      return false;\n    }\n    if (!isHorizontal && ship.length + y > 10) {\n      return false;\n    }\n\n    for (let i = 0; i < ship.length; i++) {\n      if (isHorizontal) {\n        if (this.board[y][x + i] !== null) {\n          return false;\n        }\n      } else {\n        if (this.board[y + i][x] !== null) {\n          return false;\n        }\n      }\n    }\n\n    for (let i = 0; i < ship.length; i++) {\n      if (isHorizontal) {\n        this.board[y][x + i] = ship;\n      } else {\n        this.board[y + i][x] = ship;\n      }\n    }\n    this.ships.push(ship);\n    this.originalShipPlacement.push({ ship, x, y, isHorizontal });\n    return true;\n  }\n  \n\n  reset() {\n    // 1. Reset all ships' hit counters to 0\n    this.ships.forEach((ship) => {\n      ship.numHit = 0;\n    });\n\n    // 2. Create a new, clean board grid\n    this.board = this.createBoard();\n\n    // 3. Re-place all the ships using the saved placement data\n    this.originalShipPlacement.forEach(({ ship, x, y, isHorizontal }) => {\n      for (let i = 0; i < ship.length; i++) {\n        if (isHorizontal) {\n          this.board[y][x + i] = ship;\n        } else {\n          this.board[y + i][x] = ship;\n        }\n      }\n    });\n  }\n\n  receiveAttack(x, y) {\n    const cell = this.board[y][x];\n\n    if (cell === null) {\n      this.board[y][x] = 'miss';\n      return false;\n    }\n\n    if (typeof cell === 'object') {\n      cell.hit();\n      this.board[y][x] = 'hit';\n      return cell;\n    }\n\n    return false;\n  }\n\n  allShipsSunk() {\n    return this.ships.every((ship) => ship.isSunk());\n  }\n}\n\nclass Player {\n  constructor(typePlayer) {\n    this.typePlayer = typePlayer;\n    this.gameboard = new Gameboard();\n\n    if (this.typePlayer === 'Computer') {\n      this.isHunting = true;\n      this.targetQueue = [];\n    }\n  }\n  getValidAdjacentSquares(x, y, gameboard) {\n    const adjacentSquares = [];\n    if (y > 0) {\n      adjacentSquares.push([x, y - 1]);\n    }\n    if (y < 9) {\n      adjacentSquares.push([x, y + 1]);\n    }\n    if (x > 0) {\n      adjacentSquares.push([x - 1, y]);\n    }\n    if (x < 9) {\n      adjacentSquares.push([x + 1, y]);\n    }\n    return adjacentSquares.filter(([adjX, adjY]) => {\n      const cell = gameboard.board[adjY][adjX];\n      return cell !== 'miss' && cell !== 'hit';\n    });\n  }\n\n  attack(enemyGameboard, x, y) {\n    return enemyGameboard.receiveAttack(x, y);\n  }\n\n  takeTurnComputer(enemyGameboard) {\n    if (this.isHunting) {\n      let x;\n      let y;\n      do {\n        x = Math.floor(Math.random() * 10);\n        y = Math.floor(Math.random() * 10);\n      } while (\n        enemyGameboard.board[y][x] === 'miss' ||\n        enemyGameboard.board[y][x] === 'hit'\n      );\n      const hitResult = this.attack(enemyGameboard, x, y);\n      if (hitResult) {\n        this.isHunting = false;\n        this.targetQueue = this.getValidAdjacentSquares(x, y, enemyGameboard);\n      }\n    } else {\n      if (this.targetQueue.length === 0) {\n        this.isHunting = true;\n        this.takeTurnComputer(enemyGameboard);\n        return;\n      }\n      const [x, y] = this.targetQueue.shift();\n      const hitResult = this.attack(enemyGameboard, x, y);\n      if (hitResult) {\n        const hitShip = hitResult;\n        if (hitShip.isSunk()) {\n          this.isHunting = true;\n          this.targetQueue = [];\n        }\n      }\n    }\n  }\n}\n\nexport { Ship, Gameboard, Player };\n\nnew EventListeners();\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","renderBoard","gameboard","boardElement","innerHTML","y","board","length","x","cell","document","createElement","classList","add","dataset","cellState","appendChild","Ship","constructor","this","numHit","hit","isSunk","Gameboard","createBoard","ships","originalShipPlacement","i","push","Array","fill","placeShip","ship","isHorizontal","reset","forEach","receiveAttack","allShipsSunk","every","Player","typePlayer","isHunting","targetQueue","getValidAdjacentSquares","adjacentSquares","filter","adjX","adjY","attack","enemyGameboard","takeTurnComputer","Math","floor","random","shift","hitResult","computerBoard","querySelector","playerBoard","playButton","restartButton","swapBoardButton","displayMessage","addEventListener","setupGame","contains","remove","textContent","player","computer","event","target","parseInt","runGame","shipLengths","setShipsRandomly","placed","newShip","isNaN","setTimeout"],"sourceRoot":""}